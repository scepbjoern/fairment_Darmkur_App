# Minimaler Netztest mit sichtbaren Logs zur Runtime
FROM node:22-bookworm

# FÃ¼hre die Tests beim Start aus und halte den Container am Leben (Logs sichtbar)
CMD ["sh","-lc","set -e; \
echo '[netcheck] DNS registry.npmjs.org ...'; \
node -e \"require('dns').resolve('registry.npmjs.org',(e,a)=>{if(e){console.error('DNS FAIL:',e);process.exit(21)}else{console.log('DNS OK:',a)}})\" || true; \
echo '[netcheck] HTTP http://example.com ...'; \
node -e \"require('http').get('http://example.com',r=>{console.log('HTTP example.com:',r.statusCode); if(r.statusCode!==200) process.exit(22)}).on('error',e=>{console.error('HTTP FAIL:',e);process.exit(22)})\" || true; \
echo '[netcheck] HTTPS https://registry.npmjs.org (mit Timeout 10s) ...'; \
node -e \"const https=require('https'); const ctrl=new AbortController(); const t=setTimeout(()=>{console.error('HTTPS TIMEOUT after 10s'); ctrl.abort(); process.exit(23);},10000); const req=https.get('https://registry.npmjs.org/',{signal:ctrl.signal},r=>{clearTimeout(t); console.log('HTTPS npmjs:',r.statusCode); if(r.statusCode<200||r.statusCode>=400) process.exit(23);}).on('error',e=>{clearTimeout(t); console.error('HTTPS FAIL:',e); process.exit(23);});\" || true; \
echo '[netcheck] Fertig'; \
sleep infinity"]