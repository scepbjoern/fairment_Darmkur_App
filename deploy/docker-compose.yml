version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${DB_DATA_PATH}:/var/lib/postgresql/data
    # Externen Port nur freigeben, wenn nÃ¶tig:
    # ports:
    #   - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ..
      dockerfile: Dockerfile
      network: host
    restart: unless-stopped
    environment:
      NODE_ENV: production
      # Aus Einzelwerten zusammengesetzt, keine Secrets im Repo
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public
      # optional: NEXT_TELEMETRY_DISABLED: "1"
    depends_on:
      - db
    ports:
      - "${APP_PORT:-3000}:3000"
    # Persistente Uploads (Hostpfad -> Container /app/uploads). Siehe .env: PUBLIC_UPLOADS_PATH
    # Beispiel in .env:
    #   PUBLIC_UPLOADS_PATH=../uploads
    volumes:
      - ${PUBLIC_UPLOADS_PATH:-../uploads}:/app/uploads

  backup_db:
    container_name: db-backup
    image: postgres:16
    restart: unless-stopped
    volumes:
      - ${DB_BACKUP_PATH}:/dump
      - /etc/localtime:/etc/localtime:ro
    environment:
      PGHOST: db
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: "${POSTGRES_PASSWORD}"
      PGDATABASE: ${POSTGRES_DB}
      BACKUP_NUM_KEEP: "3"
      BACKUP_FREQUENCY: "8h"
    depends_on:
      db:
        condition: service_healthy
    user: "${UID}:${GID}"
    entrypoint: |
      bash -c 'bash -s << "EOF"
      set -Eeuo pipefail
      trap "exit 0" SIGHUP SIGINT SIGTERM

      # Warten bis die DB erreichbar ist
      until pg_isready -h "$$PGHOST" -U "$$PGUSER" -d "$$PGDATABASE" >/dev/null 2>&1; do
        sleep 2
      done

      # Sicherstellen, dass wir in /dump schreiben koennen
      mkdir -p /dump

      while true; do
        ts=$$(date -u "+%Y-%m-%d_%H-%M-%S")
        # Dump im Custom-Format (-Fc)
        pg_dump -h "$$PGHOST" -U "$$PGUSER" -d "$$PGDATABASE" -Fc -f "/dump/dump_$${ts}.psql"

        # Aufraeumen: nur die juengsten BACKUP_NUM_KEEP behalten
        KEEP=$${BACKUP_NUM_KEEP:-3}
        shopt -s nullglob
        files=(/dump/dump_*.psql)
        if (("$${#files[@]}" > KEEP)); then
          # sortiere nach Zeit absteigend (juengste zuerst)
          mapfile -t sorted < <(ls -1t /dump/dump_*.psql 2>/dev/null || true)
          if (("$${#sorted[@]}" > KEEP)); then
            printf "%s\0" "$${sorted[@]:KEEP}" | xargs -0 -r rm --
          fi
        fi

        sleep $${BACKUP_FREQUENCY:-8h}
      done
      EOF'
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "diun.enable=false"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h $$PGHOST -U $$PGUSER -d $$PGDATABASE"]
      interval: 10s
      timeout: 5s
      retries: 5



networks:
  default:
    name: fairment_network
    ipam:
      config:
        - subnet: 172.40.20.0/24